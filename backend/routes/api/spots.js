const express = require("express");
const router = express.Router();
const { Spot, User, Booking } = require("../../db/models");

const { requireAuth } = require("../../utils/auth");
const Sequelize = require("sequelize");
const { check } = require("express-validator");
const { handleValidationErrors } = require("../../utils/validation");
const {
  userAttributes,
  reviewImageAttributes,
} = require("../../utils/attributes");

// const errorMessage = {
//   message: "Bad Request", // (or "Validation error" if generated by Sequelize),
//   errors: {
//     address: "Street address is required",
//     city: "City is required",
//     state: "State is required",
//     country: "Country is required",
//     lat: "Latitude must be within -90 and 90",
//     lng: "Longitude must be within -180 and 180",
//     name: "Name must be less than 50 characters",
//     description: "Description is required",
//     price: "Price per day must be a positive number",
//   },
// };

/*
  Quick note:
    I modified the routes we discussed. I made some note of changes. The overall change you should see is that the spots routes are laid out in a way that streamlines the code. Express isn't strict with layout, therefore it can be very hard to keep track of where routes are. I did it to where you start with getting all spots then by then end there's a route to delete a spot. This is my typical layout:

    GET all spots
    GET a single spot
    POST a new spot
    PUT a new spot
    DELETE a spot

    Everything else goes in between.
*/
const validateBooking = [
  check("startDate")
    .exists({ checkFalsy: true })
    .withMessage("startDate cannot be in the past"), // 400
  handleValidationErrors,
];

const validateSpot = [
  check("address")
    .exists({ checkFalsy: true })
    .withMessage("Street address is required"), // 400
  check("city").exists({ checkFalsy: true }).withMessage("City is required"), // 400
  check("state").exists({ checkFalsy: true }).withMessage("State is required"), // 400
  check("country")
    .exists({ checkFalsy: true })
    .withMessage("Country is required"), // 400
  check("lat")
    .exists({ checkFalsy: true })
    .isDecimal({ min: -90, max: 90 })
    .withMessage("Latitude must be within -90 and 90"),
  check("lng")
    .exists({ checkFalsy: true })
    .isDecimal({ min: -180, max: 180 })
    .withMessage("Longitude must be within -180 and 180"),
  check("name")
    .exists({ checkFalsy: true })
    .isLength({ max: 50 })
    .withMessage("Name must be less than 50 characters"),
  check("description")
    .exists({ checkFalsy: true })
    .withMessage("Description is required"),
  check("price")
    .exists({ checkFalsy: true })
    .isDecimal({ min: 0 })
    .withMessage("Price per day must be a positive number"),
  handleValidationErrors,
];

// get all spots
router.get("/", async (req, res) => {
  try {
    const allSpots = await Spot.findAll();
    res.json({ spots: allSpots });
  } catch (e) {
    next(e);
  }
});

// get all spots by owner id
router.get("/:ownerId", requireAuth, async (req, res, next) => {
  const ownerId = Number(req.params.ownerId);
  try {
    const allSpots = await Spot.findAll({
      where: { ownerId },
    });

    res.json({ spots: allSpots });
  } catch (e) {
    next(e);
  }
});

// get a single spot
router.get("/:spotId", async (req, res, next) => {
  const spotId = Number(req.params.spotId);

  try {
    const spot = await Spot.findByPk(spotId, {
      include: [
        {
          model: User,
          attributes: userAttributes, // only has id, firstName, lastName
          as: "Owner",
        },
        {
          model: Image,
          attributes: imageAttributes,
          as: "SpotImages",
        },
      ],
    });
    if (!spot) {
      //spot not found
      const err = new Error("Spot couldn't be found");
      err.status = 404;
      return next(err);
    }

    res.json(spot);
  } catch (e) {
    next(e);
  }
});

// get all bookings for a spot based on spot id
router.get("/:spotId/bookings", async (req, res, next) => {
  const spotId = Number(req.params.spotId);
  const uid = req.user.id;

  try {
    const spot = await Spot.findByPk(spotId);
    if (!spot) {
      const err = new Error("Spot couldn't be found");
      err.status = 404;
      return next(err);
    }

    let bookings;

    // if the user is the owner of the spot, include all details
    if (spot.ownerId === uid) {
      bookings = await Booking.findAll({
        where: { spotId },
        include: [
          {
            model: User,
            attributes: userAttributes, // only has id, firstName, lastName
            as: "User",
          },
        ],
      });

      return res.json({ Bookings: bookings });
    }

    // if the user is not the owner of the spot, only include basic details
    bookings = await Booking.findAll({
      where: { spotId },
      attributes: ["spotId", "startDate", "endDate"],
    });
    return res.json({ Bookings: bookings });
  } catch (error) {
    next(error);
  }
});

// create a spot
router.post("/", requireAuth, validateSpot, async (req, res) => {
  const ownerId = req.user.id;
  const { address, city, state, country, lat, lng, name, description, price } =
    req.body;
  try {
    const spot = await Spot.create({
      ownerId,
      address,
      city,
      state,
      country,
      lat,
      lng,
      name,
      description,
      price,
    });
    if (!spot) {
      const err = new Error("Spot couldn't be created");
      err.status = 404;
      return next(err);
    }
    res.status(201).json({ spot });
  } catch (e) {
    next(e);
  }
});

// create a booking from a spot based on spot id
router.post("/:spotId/bookings", requireAuth, async (req, res) => {
  const ownerId = req.user.id;
  const { startDate, endDate } = req.body;
  const spotId = Number(req.params.spotId);
  try {
    const spot = await Spot.findByPk(spotId);
    if (!spot) {
      const err = new Error("Spot couldn't be found");
      err.status = 404;
      next(err);
    }
    if (spot.ownerId === ownerId) {
      const err = new Error("Forbidden");
      err.status = 403;
      next(err);
    }
    const booking = await Booking.create({
      spotId,
      userId: ownerId,
      startDate,
      endDate,
    });
    res.status(201).json(booking);
  } catch (e) {
    next(e);
  }
});

// Add image to spot based on spot id
router.post("/:spotId/images", requireAuth, async (req, res) => {
  const ownerId = req.user.id;
  const { url, preview } = req.body;
  const spotId = Number(req.params.spotId);
  try {
    const spot = await Spot.findByPk(spotId);

    if (!spot) {
      const err = new Error("Spot couldn't be found");
      err.status = 404;
      next(err);
    }
    if (spot.ownerId !== ownerId) {
      const err = new Error("Forbidden");
      err.status = 403;
      next(err);
    }
    const newImage = await spot.createImage({
      url,
      preview,
    });
    res.status(201).json(newImage);
  } catch (e) {
    next(e);
  }
});
// create booking from spot id
router.post(
  "/:spotId/bookings",
  requireAuth,
  validateBooking,
  async (req, res, next) => {
    const userId = req.user.id;
    const { startDate, endDate } = req.body;
    const spotId = Number(req.params.spotId);
    // const today = new Date.now()
    // const now = today.now()
    try {
      const booking = await Booking.create({
        spotId,
        userId,
        startDate,
        endDate,
      });
      const spot = await Spot.findByPk(spotId);
      const newStartDate = new Date(startDate).toISOString().slice(0, 10);
      const newendDate = new Date(endDate).toISOString().slice(0, 10);
      if (userId === spot.OwnerId) {
        throw new Error("Spot must not belong to user");
      }
      if (!spot) {
        const err = new Error("Spot couldn't be found");
        err.status = 404;
        next(err);
      }
      // if(now < startDate){
      //   const err = new Error("startDate cant be the past");
      //   err.status = 400
      //   next(err)
      // }

      // if(endDate <= startDate){
      //   const err = new Error("endDate cant be on or before startDate");
      //   err.status = 400
      //   next(err)
      // }

      // need help with .check for body validation errors
      res.status(201).json(booking);
    } catch (e) {
      e.status = 500;
      next(e);
    }
  }
);
// create booking from spot id
router.post(
  "/:spotId/bookings",
  requireAuth,
  validateBooking,
  async (req, res, next) => {
    const userId = req.user.id;
    const { startDate, endDate } = req.body;
    const spotId = Number(req.params.spotId);
    // const today = new Date.now()
    // const now = today.now()
    try {
      const booking = await Booking.create({
        spotId,
        userId,
        startDate,
        endDate,
      });
      const spot = await Spot.findByPk(spotId);
      const newStartDate = new Date(startDate).toISOString().slice(0, 10);
      const newendDate = new Date(endDate).toISOString().slice(0, 10);
      if (userId === spot.OwnerId) {
        throw new Error("Spot must not belong to user");
      }
      if (!spot) {
        const err = new Error("Spot couldn't be found");
        err.status = 404;
        next(err);
      }
      // if(now < startDate){
      //   const err = new Error("startDate cant be the past");
      //   err.status = 400
      //   next(err)
      // }

      // if(endDate <= startDate){
      //   const err = new Error("endDate cant be on or before startDate");
      //   err.status = 400
      //   next(err)
      // }

      // need help with .check for body validation errors
      res.status(201).json(booking);
    } catch (e) {
      e.status = 500;
      next(e);
    }
  }
);

// edit a spot by spot id
router.put("/:spotId", requireAuth, validateSpot, async (req, res) => {
  const ownerId = req.user.id;
  const { address, city, state, country, lat, lng, name, description, price } =
    req.body;

  const spotId = Number(req.params.spotId);

  try {
    const spot = await Spot.findByPk(spotId);

    if (!spot) {
      const err = new Error("Spot couldn't be found");
      err.status = 404;
      next(err);
    }

    await spot.update({
      ownerId,
      address,
      city,
      state,
      country,
      lat,
      lng,
      name,
      description,
      price,
    });
    await spot.save();
    res.status(200).json({ spot });
  } catch (e) {
    next(e);
  }
});

// delete spot by spot id
router.delete("/:spotId", requireAuth, async (req, res) => {
  const spotId = Number(req.params.spotId);

  try {
    const spot = await Spot.findByPk(spotId);
    if (!spot) {
      const err = new Error("Spot couldn't be found");
      err.status = 404;
      return next(err);
    }
    if (spot.ownerId !== req.user.id) {
      const err = new Error("Forbidden");
      err.status = 403;
      return next(err);
    }
    spot.destroy();
    res.json({ message: "Successfully deleted" });
  } catch (e) {
    next(e);
  }
});

// create booking from spot id
module.exports = router;
